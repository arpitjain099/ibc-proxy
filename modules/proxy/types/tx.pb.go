// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/modules/proxy/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types2 "github.com/cosmos/ibc-go/modules/core/02-client/types"
	types3 "github.com/cosmos/ibc-go/modules/core/03-connection/types"
	types4 "github.com/cosmos/ibc-go/modules/core/04-channel/types"
	types "github.com/cosmos/ibc-go/modules/core/23-commitment/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgProxyClientState struct {
	UpstreamClientId     string             `protobuf:"bytes,1,opt,name=upstream_client_id,json=upstreamClientId,proto3" json:"upstream_client_id,omitempty"`
	UpstreamPrefix       types.MerklePrefix `protobuf:"bytes,2,opt,name=upstream_prefix,json=upstreamPrefix,proto3" json:"upstream_prefix"`
	CounterpartyClientId string             `protobuf:"bytes,3,opt,name=counterparty_client_id,json=counterpartyClientId,proto3" json:"counterparty_client_id,omitempty"`
	ClientState          *types1.Any        `protobuf:"bytes,4,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
	ConsensusState       *types1.Any        `protobuf:"bytes,5,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
	ProofClient          []byte             `protobuf:"bytes,6,opt,name=proof_client,json=proofClient,proto3" json:"proof_client,omitempty"`
	ProofConsensus       []byte             `protobuf:"bytes,7,opt,name=proof_consensus,json=proofConsensus,proto3" json:"proof_consensus,omitempty"`
	ProofHeight          types2.Height      `protobuf:"bytes,8,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	ConsensusHeight      types2.Height      `protobuf:"bytes,9,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height"`
	Signer               string             `protobuf:"bytes,10,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgProxyClientState) Reset()         { *m = MsgProxyClientState{} }
func (m *MsgProxyClientState) String() string { return proto.CompactTextString(m) }
func (*MsgProxyClientState) ProtoMessage()    {}
func (*MsgProxyClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{0}
}
func (m *MsgProxyClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyClientState.Merge(m, src)
}
func (m *MsgProxyClientState) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyClientState.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyClientState proto.InternalMessageInfo

type MsgProxyClientStateResponse struct {
}

func (m *MsgProxyClientStateResponse) Reset()         { *m = MsgProxyClientStateResponse{} }
func (m *MsgProxyClientStateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProxyClientStateResponse) ProtoMessage()    {}
func (*MsgProxyClientStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{1}
}
func (m *MsgProxyClientStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyClientStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyClientStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyClientStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyClientStateResponse.Merge(m, src)
}
func (m *MsgProxyClientStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyClientStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyClientStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyClientStateResponse proto.InternalMessageInfo

type MsgProxyConnectionOpenTry struct {
	ConnectionId     string               `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	UpstreamClientId string               `protobuf:"bytes,2,opt,name=upstream_client_id,json=upstreamClientId,proto3" json:"upstream_client_id,omitempty"`
	UpstreamPrefix   types.MerklePrefix   `protobuf:"bytes,3,opt,name=upstream_prefix,json=upstreamPrefix,proto3" json:"upstream_prefix"`
	Connection       types3.ConnectionEnd `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection"`
	ClientState      *types1.Any          `protobuf:"bytes,5,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
	ConsensusState   *types1.Any          `protobuf:"bytes,6,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
	ProofInit        []byte               `protobuf:"bytes,7,opt,name=proof_init,json=proofInit,proto3" json:"proof_init,omitempty"`
	ProofClient      []byte               `protobuf:"bytes,8,opt,name=proof_client,json=proofClient,proto3" json:"proof_client,omitempty"`
	ProofConsensus   []byte               `protobuf:"bytes,9,opt,name=proof_consensus,json=proofConsensus,proto3" json:"proof_consensus,omitempty"`
	ProofHeight      types2.Height        `protobuf:"bytes,10,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	ConsensusHeight  types2.Height        `protobuf:"bytes,11,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height"`
	Signer           string               `protobuf:"bytes,12,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgProxyConnectionOpenTry) Reset()         { *m = MsgProxyConnectionOpenTry{} }
func (m *MsgProxyConnectionOpenTry) String() string { return proto.CompactTextString(m) }
func (*MsgProxyConnectionOpenTry) ProtoMessage()    {}
func (*MsgProxyConnectionOpenTry) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{2}
}
func (m *MsgProxyConnectionOpenTry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyConnectionOpenTry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyConnectionOpenTry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyConnectionOpenTry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyConnectionOpenTry.Merge(m, src)
}
func (m *MsgProxyConnectionOpenTry) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyConnectionOpenTry) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyConnectionOpenTry.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyConnectionOpenTry proto.InternalMessageInfo

type MsgProxyConnectionOpenTryResponse struct {
}

func (m *MsgProxyConnectionOpenTryResponse) Reset()         { *m = MsgProxyConnectionOpenTryResponse{} }
func (m *MsgProxyConnectionOpenTryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProxyConnectionOpenTryResponse) ProtoMessage()    {}
func (*MsgProxyConnectionOpenTryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{3}
}
func (m *MsgProxyConnectionOpenTryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyConnectionOpenTryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyConnectionOpenTryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyConnectionOpenTryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyConnectionOpenTryResponse.Merge(m, src)
}
func (m *MsgProxyConnectionOpenTryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyConnectionOpenTryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyConnectionOpenTryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyConnectionOpenTryResponse proto.InternalMessageInfo

type MsgProxyConnectionOpenAck struct {
	ConnectionId     string               `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	UpstreamClientId string               `protobuf:"bytes,2,opt,name=upstream_client_id,json=upstreamClientId,proto3" json:"upstream_client_id,omitempty"`
	UpstreamPrefix   types.MerklePrefix   `protobuf:"bytes,3,opt,name=upstream_prefix,json=upstreamPrefix,proto3" json:"upstream_prefix"`
	Connection       types3.ConnectionEnd `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection"`
	ClientState      *types1.Any          `protobuf:"bytes,5,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
	ConsensusState   *types1.Any          `protobuf:"bytes,6,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
	Version          *types3.Version      `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	ProofTry         []byte               `protobuf:"bytes,8,opt,name=proof_try,json=proofTry,proto3" json:"proof_try,omitempty"`
	ProofClient      []byte               `protobuf:"bytes,9,opt,name=proof_client,json=proofClient,proto3" json:"proof_client,omitempty"`
	ProofConsensus   []byte               `protobuf:"bytes,10,opt,name=proof_consensus,json=proofConsensus,proto3" json:"proof_consensus,omitempty"`
	ProofHeight      types2.Height        `protobuf:"bytes,11,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	ConsensusHeight  types2.Height        `protobuf:"bytes,12,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height"`
	Signer           string               `protobuf:"bytes,13,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgProxyConnectionOpenAck) Reset()         { *m = MsgProxyConnectionOpenAck{} }
func (m *MsgProxyConnectionOpenAck) String() string { return proto.CompactTextString(m) }
func (*MsgProxyConnectionOpenAck) ProtoMessage()    {}
func (*MsgProxyConnectionOpenAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{4}
}
func (m *MsgProxyConnectionOpenAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyConnectionOpenAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyConnectionOpenAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyConnectionOpenAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyConnectionOpenAck.Merge(m, src)
}
func (m *MsgProxyConnectionOpenAck) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyConnectionOpenAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyConnectionOpenAck.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyConnectionOpenAck proto.InternalMessageInfo

type MsgProxyConnectionOpenAckResponse struct {
}

func (m *MsgProxyConnectionOpenAckResponse) Reset()         { *m = MsgProxyConnectionOpenAckResponse{} }
func (m *MsgProxyConnectionOpenAckResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProxyConnectionOpenAckResponse) ProtoMessage()    {}
func (*MsgProxyConnectionOpenAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{5}
}
func (m *MsgProxyConnectionOpenAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyConnectionOpenAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyConnectionOpenAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyConnectionOpenAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyConnectionOpenAckResponse.Merge(m, src)
}
func (m *MsgProxyConnectionOpenAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyConnectionOpenAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyConnectionOpenAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyConnectionOpenAckResponse proto.InternalMessageInfo

type MsgProxyConnectionOpenConfirm struct {
	ConnectionId     string               `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	UpstreamClientId string               `protobuf:"bytes,2,opt,name=upstream_client_id,json=upstreamClientId,proto3" json:"upstream_client_id,omitempty"`
	UpstreamPrefix   types.MerklePrefix   `protobuf:"bytes,3,opt,name=upstream_prefix,json=upstreamPrefix,proto3" json:"upstream_prefix"`
	Connection       types3.ConnectionEnd `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection"`
	ProofAck         []byte               `protobuf:"bytes,5,opt,name=proof_ack,json=proofAck,proto3" json:"proof_ack,omitempty"`
	ProofHeight      types2.Height        `protobuf:"bytes,6,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	Signer           string               `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgProxyConnectionOpenConfirm) Reset()         { *m = MsgProxyConnectionOpenConfirm{} }
func (m *MsgProxyConnectionOpenConfirm) String() string { return proto.CompactTextString(m) }
func (*MsgProxyConnectionOpenConfirm) ProtoMessage()    {}
func (*MsgProxyConnectionOpenConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{6}
}
func (m *MsgProxyConnectionOpenConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyConnectionOpenConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyConnectionOpenConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyConnectionOpenConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyConnectionOpenConfirm.Merge(m, src)
}
func (m *MsgProxyConnectionOpenConfirm) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyConnectionOpenConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyConnectionOpenConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyConnectionOpenConfirm proto.InternalMessageInfo

type MsgProxyConnectionOpenConfirmResponse struct {
}

func (m *MsgProxyConnectionOpenConfirmResponse) Reset()         { *m = MsgProxyConnectionOpenConfirmResponse{} }
func (m *MsgProxyConnectionOpenConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProxyConnectionOpenConfirmResponse) ProtoMessage()    {}
func (*MsgProxyConnectionOpenConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{7}
}
func (m *MsgProxyConnectionOpenConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyConnectionOpenConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyConnectionOpenConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyConnectionOpenConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyConnectionOpenConfirmResponse.Merge(m, src)
}
func (m *MsgProxyConnectionOpenConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyConnectionOpenConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyConnectionOpenConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyConnectionOpenConfirmResponse proto.InternalMessageInfo

type MsgProxyChannelOpenTry struct {
	UpstreamClientId  string             `protobuf:"bytes,1,opt,name=upstream_client_id,json=upstreamClientId,proto3" json:"upstream_client_id,omitempty"`
	UpstreamPrefix    types.MerklePrefix `protobuf:"bytes,2,opt,name=upstream_prefix,json=upstreamPrefix,proto3" json:"upstream_prefix"`
	Order             types4.Order       `protobuf:"varint,3,opt,name=order,proto3,enum=ibc.core.channel.v1.Order" json:"order,omitempty"`
	ConnectionHops    []string           `protobuf:"bytes,4,rep,name=connection_hops,json=connectionHops,proto3" json:"connection_hops,omitempty"`
	PortId            string             `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId         string             `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	DownstreamPortId  string             `protobuf:"bytes,7,opt,name=downstream_port_id,json=downstreamPortId,proto3" json:"downstream_port_id,omitempty"`
	Version           string             `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	DownstreamVersion string             `protobuf:"bytes,9,opt,name=downstream_version,json=downstreamVersion,proto3" json:"downstream_version,omitempty"`
	ProofInit         []byte             `protobuf:"bytes,10,opt,name=proof_init,json=proofInit,proto3" json:"proof_init,omitempty"`
	ProofHeight       types2.Height      `protobuf:"bytes,11,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	Signer            string             `protobuf:"bytes,12,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgProxyChannelOpenTry) Reset()         { *m = MsgProxyChannelOpenTry{} }
func (m *MsgProxyChannelOpenTry) String() string { return proto.CompactTextString(m) }
func (*MsgProxyChannelOpenTry) ProtoMessage()    {}
func (*MsgProxyChannelOpenTry) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{8}
}
func (m *MsgProxyChannelOpenTry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyChannelOpenTry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyChannelOpenTry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyChannelOpenTry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyChannelOpenTry.Merge(m, src)
}
func (m *MsgProxyChannelOpenTry) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyChannelOpenTry) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyChannelOpenTry.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyChannelOpenTry proto.InternalMessageInfo

type MsgProxyChannelOpenTryResponse struct {
}

func (m *MsgProxyChannelOpenTryResponse) Reset()         { *m = MsgProxyChannelOpenTryResponse{} }
func (m *MsgProxyChannelOpenTryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProxyChannelOpenTryResponse) ProtoMessage()    {}
func (*MsgProxyChannelOpenTryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{9}
}
func (m *MsgProxyChannelOpenTryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyChannelOpenTryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyChannelOpenTryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyChannelOpenTryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyChannelOpenTryResponse.Merge(m, src)
}
func (m *MsgProxyChannelOpenTryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyChannelOpenTryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyChannelOpenTryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyChannelOpenTryResponse proto.InternalMessageInfo

type MsgProxyChannelOpenAck struct {
	UpstreamClientId    string             `protobuf:"bytes,1,opt,name=upstream_client_id,json=upstreamClientId,proto3" json:"upstream_client_id,omitempty"`
	UpstreamPrefix      types.MerklePrefix `protobuf:"bytes,2,opt,name=upstream_prefix,json=upstreamPrefix,proto3" json:"upstream_prefix"`
	Order               types4.Order       `protobuf:"varint,3,opt,name=order,proto3,enum=ibc.core.channel.v1.Order" json:"order,omitempty"`
	ConnectionHops      []string           `protobuf:"bytes,4,rep,name=connection_hops,json=connectionHops,proto3" json:"connection_hops,omitempty"`
	PortId              string             `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId           string             `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	DownstreamPortId    string             `protobuf:"bytes,7,opt,name=downstream_port_id,json=downstreamPortId,proto3" json:"downstream_port_id,omitempty"`
	DownstreamChannelId string             `protobuf:"bytes,8,opt,name=downstream_channel_id,json=downstreamChannelId,proto3" json:"downstream_channel_id,omitempty"`
	Version             string             `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	DownstreamVersion   string             `protobuf:"bytes,10,opt,name=downstream_version,json=downstreamVersion,proto3" json:"downstream_version,omitempty"`
	ProofTry            []byte             `protobuf:"bytes,11,opt,name=proof_try,json=proofTry,proto3" json:"proof_try,omitempty"`
	ProofHeight         types2.Height      `protobuf:"bytes,12,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	Signer              string             `protobuf:"bytes,13,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgProxyChannelOpenAck) Reset()         { *m = MsgProxyChannelOpenAck{} }
func (m *MsgProxyChannelOpenAck) String() string { return proto.CompactTextString(m) }
func (*MsgProxyChannelOpenAck) ProtoMessage()    {}
func (*MsgProxyChannelOpenAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{10}
}
func (m *MsgProxyChannelOpenAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyChannelOpenAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyChannelOpenAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyChannelOpenAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyChannelOpenAck.Merge(m, src)
}
func (m *MsgProxyChannelOpenAck) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyChannelOpenAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyChannelOpenAck.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyChannelOpenAck proto.InternalMessageInfo

type MsgProxyChannelOpenAckResponse struct {
}

func (m *MsgProxyChannelOpenAckResponse) Reset()         { *m = MsgProxyChannelOpenAckResponse{} }
func (m *MsgProxyChannelOpenAckResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProxyChannelOpenAckResponse) ProtoMessage()    {}
func (*MsgProxyChannelOpenAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{11}
}
func (m *MsgProxyChannelOpenAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyChannelOpenAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyChannelOpenAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyChannelOpenAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyChannelOpenAckResponse.Merge(m, src)
}
func (m *MsgProxyChannelOpenAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyChannelOpenAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyChannelOpenAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyChannelOpenAckResponse proto.InternalMessageInfo

type MsgProxyChannelOpenConfirm struct {
	UpstreamClientId    string             `protobuf:"bytes,1,opt,name=upstream_client_id,json=upstreamClientId,proto3" json:"upstream_client_id,omitempty"`
	UpstreamPrefix      types.MerklePrefix `protobuf:"bytes,2,opt,name=upstream_prefix,json=upstreamPrefix,proto3" json:"upstream_prefix"`
	PortId              string             `protobuf:"bytes,3,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId           string             `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	DownstreamChannelId string             `protobuf:"bytes,5,opt,name=downstream_channel_id,json=downstreamChannelId,proto3" json:"downstream_channel_id,omitempty"`
	ProofAck            []byte             `protobuf:"bytes,6,opt,name=proof_ack,json=proofAck,proto3" json:"proof_ack,omitempty"`
	ProofHeight         types2.Height      `protobuf:"bytes,7,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	Signer              string             `protobuf:"bytes,8,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgProxyChannelOpenConfirm) Reset()         { *m = MsgProxyChannelOpenConfirm{} }
func (m *MsgProxyChannelOpenConfirm) String() string { return proto.CompactTextString(m) }
func (*MsgProxyChannelOpenConfirm) ProtoMessage()    {}
func (*MsgProxyChannelOpenConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{12}
}
func (m *MsgProxyChannelOpenConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyChannelOpenConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyChannelOpenConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyChannelOpenConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyChannelOpenConfirm.Merge(m, src)
}
func (m *MsgProxyChannelOpenConfirm) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyChannelOpenConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyChannelOpenConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyChannelOpenConfirm proto.InternalMessageInfo

func (m *MsgProxyChannelOpenConfirm) GetUpstreamClientId() string {
	if m != nil {
		return m.UpstreamClientId
	}
	return ""
}

func (m *MsgProxyChannelOpenConfirm) GetUpstreamPrefix() types.MerklePrefix {
	if m != nil {
		return m.UpstreamPrefix
	}
	return types.MerklePrefix{}
}

func (m *MsgProxyChannelOpenConfirm) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *MsgProxyChannelOpenConfirm) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgProxyChannelOpenConfirm) GetDownstreamChannelId() string {
	if m != nil {
		return m.DownstreamChannelId
	}
	return ""
}

func (m *MsgProxyChannelOpenConfirm) GetProofAck() []byte {
	if m != nil {
		return m.ProofAck
	}
	return nil
}

func (m *MsgProxyChannelOpenConfirm) GetProofHeight() types2.Height {
	if m != nil {
		return m.ProofHeight
	}
	return types2.Height{}
}

func (m *MsgProxyChannelOpenConfirm) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type MsgProxyChannelOpenConfirmResponse struct {
}

func (m *MsgProxyChannelOpenConfirmResponse) Reset()         { *m = MsgProxyChannelOpenConfirmResponse{} }
func (m *MsgProxyChannelOpenConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProxyChannelOpenConfirmResponse) ProtoMessage()    {}
func (*MsgProxyChannelOpenConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{13}
}
func (m *MsgProxyChannelOpenConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyChannelOpenConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyChannelOpenConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyChannelOpenConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyChannelOpenConfirmResponse.Merge(m, src)
}
func (m *MsgProxyChannelOpenConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyChannelOpenConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyChannelOpenConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyChannelOpenConfirmResponse proto.InternalMessageInfo

type MsgProxyRecvPacket struct {
	UpstreamClientId string             `protobuf:"bytes,1,opt,name=upstream_client_id,json=upstreamClientId,proto3" json:"upstream_client_id,omitempty"`
	UpstreamPrefix   types.MerklePrefix `protobuf:"bytes,2,opt,name=upstream_prefix,json=upstreamPrefix,proto3" json:"upstream_prefix"`
	Packet           types4.Packet      `protobuf:"bytes,3,opt,name=packet,proto3" json:"packet"`
	Proof            []byte             `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	ProofHeight      types2.Height      `protobuf:"bytes,5,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	Signer           string             `protobuf:"bytes,6,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgProxyRecvPacket) Reset()         { *m = MsgProxyRecvPacket{} }
func (m *MsgProxyRecvPacket) String() string { return proto.CompactTextString(m) }
func (*MsgProxyRecvPacket) ProtoMessage()    {}
func (*MsgProxyRecvPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{14}
}
func (m *MsgProxyRecvPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyRecvPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyRecvPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyRecvPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyRecvPacket.Merge(m, src)
}
func (m *MsgProxyRecvPacket) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyRecvPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyRecvPacket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyRecvPacket proto.InternalMessageInfo

type MsgProxyRecvPacketResponse struct {
}

func (m *MsgProxyRecvPacketResponse) Reset()         { *m = MsgProxyRecvPacketResponse{} }
func (m *MsgProxyRecvPacketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProxyRecvPacketResponse) ProtoMessage()    {}
func (*MsgProxyRecvPacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{15}
}
func (m *MsgProxyRecvPacketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyRecvPacketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyRecvPacketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyRecvPacketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyRecvPacketResponse.Merge(m, src)
}
func (m *MsgProxyRecvPacketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyRecvPacketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyRecvPacketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyRecvPacketResponse proto.InternalMessageInfo

type MsgProxyAcknowledgePacket struct {
	UpstreamClientId string             `protobuf:"bytes,1,opt,name=upstream_client_id,json=upstreamClientId,proto3" json:"upstream_client_id,omitempty"`
	UpstreamPrefix   types.MerklePrefix `protobuf:"bytes,2,opt,name=upstream_prefix,json=upstreamPrefix,proto3" json:"upstream_prefix"`
	Packet           types4.Packet      `protobuf:"bytes,3,opt,name=packet,proto3" json:"packet"`
	Acknowledgement  []byte             `protobuf:"bytes,4,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
	Proof            []byte             `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	ProofHeight      types2.Height      `protobuf:"bytes,6,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	Signer           string             `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgProxyAcknowledgePacket) Reset()         { *m = MsgProxyAcknowledgePacket{} }
func (m *MsgProxyAcknowledgePacket) String() string { return proto.CompactTextString(m) }
func (*MsgProxyAcknowledgePacket) ProtoMessage()    {}
func (*MsgProxyAcknowledgePacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{16}
}
func (m *MsgProxyAcknowledgePacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyAcknowledgePacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyAcknowledgePacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyAcknowledgePacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyAcknowledgePacket.Merge(m, src)
}
func (m *MsgProxyAcknowledgePacket) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyAcknowledgePacket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyAcknowledgePacket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyAcknowledgePacket proto.InternalMessageInfo

type MsgProxyAcknowledgePacketResponse struct {
}

func (m *MsgProxyAcknowledgePacketResponse) Reset()         { *m = MsgProxyAcknowledgePacketResponse{} }
func (m *MsgProxyAcknowledgePacketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProxyAcknowledgePacketResponse) ProtoMessage()    {}
func (*MsgProxyAcknowledgePacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68797dc99f8f4cd2, []int{17}
}
func (m *MsgProxyAcknowledgePacketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProxyAcknowledgePacketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProxyAcknowledgePacketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProxyAcknowledgePacketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProxyAcknowledgePacketResponse.Merge(m, src)
}
func (m *MsgProxyAcknowledgePacketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProxyAcknowledgePacketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProxyAcknowledgePacketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProxyAcknowledgePacketResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgProxyClientState)(nil), "ibc.proxy.v1.MsgProxyClientState")
	proto.RegisterType((*MsgProxyClientStateResponse)(nil), "ibc.proxy.v1.MsgProxyClientStateResponse")
	proto.RegisterType((*MsgProxyConnectionOpenTry)(nil), "ibc.proxy.v1.MsgProxyConnectionOpenTry")
	proto.RegisterType((*MsgProxyConnectionOpenTryResponse)(nil), "ibc.proxy.v1.MsgProxyConnectionOpenTryResponse")
	proto.RegisterType((*MsgProxyConnectionOpenAck)(nil), "ibc.proxy.v1.MsgProxyConnectionOpenAck")
	proto.RegisterType((*MsgProxyConnectionOpenAckResponse)(nil), "ibc.proxy.v1.MsgProxyConnectionOpenAckResponse")
	proto.RegisterType((*MsgProxyConnectionOpenConfirm)(nil), "ibc.proxy.v1.MsgProxyConnectionOpenConfirm")
	proto.RegisterType((*MsgProxyConnectionOpenConfirmResponse)(nil), "ibc.proxy.v1.MsgProxyConnectionOpenConfirmResponse")
	proto.RegisterType((*MsgProxyChannelOpenTry)(nil), "ibc.proxy.v1.MsgProxyChannelOpenTry")
	proto.RegisterType((*MsgProxyChannelOpenTryResponse)(nil), "ibc.proxy.v1.MsgProxyChannelOpenTryResponse")
	proto.RegisterType((*MsgProxyChannelOpenAck)(nil), "ibc.proxy.v1.MsgProxyChannelOpenAck")
	proto.RegisterType((*MsgProxyChannelOpenAckResponse)(nil), "ibc.proxy.v1.MsgProxyChannelOpenAckResponse")
	proto.RegisterType((*MsgProxyChannelOpenConfirm)(nil), "ibc.proxy.v1.MsgProxyChannelOpenConfirm")
	proto.RegisterType((*MsgProxyChannelOpenConfirmResponse)(nil), "ibc.proxy.v1.MsgProxyChannelOpenConfirmResponse")
	proto.RegisterType((*MsgProxyRecvPacket)(nil), "ibc.proxy.v1.MsgProxyRecvPacket")
	proto.RegisterType((*MsgProxyRecvPacketResponse)(nil), "ibc.proxy.v1.MsgProxyRecvPacketResponse")
	proto.RegisterType((*MsgProxyAcknowledgePacket)(nil), "ibc.proxy.v1.MsgProxyAcknowledgePacket")
	proto.RegisterType((*MsgProxyAcknowledgePacketResponse)(nil), "ibc.proxy.v1.MsgProxyAcknowledgePacketResponse")
}

func init() { proto.RegisterFile("ibc/modules/proxy/tx.proto", fileDescriptor_68797dc99f8f4cd2) }

var fileDescriptor_68797dc99f8f4cd2 = []byte{
	// 1264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x99, 0xcd, 0x6f, 0xe3, 0xc4,
	0x1b, 0xc7, 0x93, 0xe6, 0xfd, 0x49, 0xfa, 0xf2, 0x73, 0xfb, 0xeb, 0x66, 0x53, 0x9a, 0xa6, 0xdd,
	0xae, 0x1a, 0x44, 0xd7, 0xde, 0x74, 0x41, 0x68, 0x91, 0x38, 0x74, 0x2b, 0xa4, 0xad, 0x56, 0x55,
	0xab, 0x2c, 0xe2, 0x80, 0x84, 0x8a, 0xe3, 0x4c, 0x13, 0x2b, 0x89, 0xc7, 0xb2, 0x9d, 0x6c, 0x73,
	0x41, 0x5c, 0x90, 0x38, 0x72, 0xe4, 0xb8, 0x37, 0x0e, 0xfc, 0x1f, 0x68, 0x6f, 0xec, 0x91, 0x0b,
	0x68, 0xd5, 0x5e, 0xb8, 0xf1, 0x2f, 0xa0, 0x79, 0xf1, 0xd8, 0x75, 0xe2, 0xc4, 0x25, 0x05, 0x55,
	0xb0, 0x37, 0x7b, 0xe6, 0x3b, 0xcf, 0xcc, 0x3c, 0xcf, 0xe7, 0x99, 0x67, 0xe2, 0x40, 0x49, 0x6f,
	0x68, 0x4a, 0x0f, 0x37, 0xfb, 0x5d, 0x64, 0x2b, 0xa6, 0x85, 0xcf, 0x87, 0x8a, 0x73, 0x2e, 0x9b,
	0x16, 0x76, 0xb0, 0x54, 0xd0, 0x1b, 0x9a, 0x4c, 0xdb, 0xe4, 0x41, 0xad, 0xb4, 0xd2, 0xc2, 0x2d,
	0x4c, 0x3b, 0x14, 0xf2, 0xc4, 0x34, 0xa5, 0x0d, 0x32, 0x5e, 0xc3, 0x16, 0x52, 0xb4, 0xae, 0x8e,
	0x0c, 0x47, 0x19, 0xd4, 0xf8, 0x13, 0x17, 0xec, 0x78, 0x02, 0x6c, 0x18, 0x48, 0x73, 0x74, 0x6c,
	0x50, 0x91, 0x78, 0xe3, 0xc2, 0x4d, 0x4f, 0xd8, 0x56, 0x0d, 0x03, 0x75, 0xa9, 0x8a, 0x3d, 0x8e,
	0xb1, 0xd5, 0xeb, 0xe9, 0x4e, 0xcf, 0x9d, 0x50, 0xbc, 0x71, 0xe1, 0xdd, 0x16, 0xc6, 0xad, 0x2e,
	0x52, 0xe8, 0x5b, 0xa3, 0x7f, 0xa6, 0xa8, 0xc6, 0x90, 0x75, 0x6d, 0xfd, 0x94, 0x84, 0xe5, 0x23,
	0xbb, 0x75, 0x42, 0xb6, 0x75, 0x40, 0x17, 0xfa, 0xdc, 0x51, 0x1d, 0x24, 0xed, 0x82, 0xd4, 0x37,
	0x6d, 0xc7, 0x42, 0x6a, 0xef, 0x94, 0x6d, 0xe0, 0x54, 0x6f, 0x16, 0xe3, 0x95, 0x78, 0x35, 0x57,
	0x5f, 0x72, 0x7b, 0xd8, 0x80, 0xc3, 0xa6, 0xf4, 0x1c, 0x16, 0x85, 0xda, 0xb4, 0xd0, 0x99, 0x7e,
	0x5e, 0x9c, 0xab, 0xc4, 0xab, 0xf9, 0xbd, 0x6d, 0x99, 0x38, 0x8d, 0xac, 0x51, 0xf6, 0xad, 0x6a,
	0x50, 0x93, 0x8f, 0x90, 0xd5, 0xe9, 0xa2, 0x13, 0xaa, 0x7d, 0x92, 0x7c, 0xf5, 0xdb, 0x46, 0xac,
	0xbe, 0xe0, 0x9a, 0x60, 0xad, 0xd2, 0xfb, 0xb0, 0xaa, 0xe1, 0xbe, 0xe1, 0x20, 0xcb, 0x54, 0x2d,
	0x67, 0xe8, 0x5b, 0x46, 0x82, 0x2e, 0x63, 0xc5, 0xdf, 0x2b, 0x96, 0xf2, 0x21, 0x14, 0xb8, 0xd0,
	0x26, 0x1b, 0x29, 0x26, 0xe9, 0x3a, 0x56, 0x64, 0xe6, 0x02, 0xd9, 0x75, 0x81, 0xbc, 0x6f, 0x0c,
	0xeb, 0x79, 0xcd, 0xb7, 0xe3, 0x8f, 0x61, 0x51, 0xc3, 0x86, 0x8d, 0x0c, 0xbb, 0x6f, 0xf3, 0xb1,
	0xa9, 0x09, 0x63, 0x17, 0x84, 0x98, 0x0d, 0xdf, 0x84, 0x82, 0x69, 0x61, 0x7c, 0xc6, 0x97, 0x59,
	0x4c, 0x57, 0xe2, 0xd5, 0x42, 0x3d, 0x4f, 0xdb, 0xd8, 0xe2, 0xa4, 0x1d, 0x58, 0xe4, 0x12, 0x77,
	0x68, 0x31, 0x43, 0x55, 0x0b, 0x4c, 0xe5, 0xb6, 0x4a, 0x07, 0xae, 0xad, 0x36, 0xd2, 0x5b, 0x6d,
	0xa7, 0x98, 0xa5, 0xeb, 0x28, 0xf9, 0x7c, 0xc9, 0x90, 0x1a, 0xd4, 0xe4, 0xa7, 0x54, 0xc1, 0x3d,
	0xc8, 0x66, 0x63, 0x4d, 0xd2, 0x33, 0x58, 0xf2, 0xf6, 0xc3, 0x0d, 0xe5, 0x22, 0x1a, 0xf2, 0x3c,
	0xc1, 0x8d, 0xad, 0x42, 0xda, 0xd6, 0x5b, 0x06, 0xb2, 0x8a, 0x40, 0x7d, 0xcf, 0xdf, 0x3e, 0xca,
	0x7e, 0xfb, 0x72, 0x23, 0xf6, 0xfb, 0xcb, 0x8d, 0xd8, 0xd6, 0x3a, 0xac, 0x8d, 0xe1, 0xa8, 0x8e,
	0x6c, 0x93, 0x98, 0xda, 0xfa, 0x21, 0x05, 0x77, 0x45, 0xbf, 0x60, 0xfd, 0xd8, 0x44, 0xc6, 0xa7,
	0xd6, 0x50, 0xba, 0x07, 0xf3, 0x5e, 0x02, 0x78, 0xa0, 0x15, 0xbc, 0xc6, 0xc3, 0x66, 0x08, 0x92,
	0x73, 0xd1, 0x91, 0x4c, 0xcc, 0x8c, 0xe4, 0x33, 0x00, 0x6f, 0x49, 0x1c, 0xad, 0xfb, 0x7e, 0x7b,
	0x22, 0x89, 0x07, 0x35, 0xd9, 0xdb, 0xe6, 0x27, 0x46, 0x93, 0x1b, 0xf4, 0x0d, 0x1f, 0x21, 0x35,
	0x35, 0x03, 0xa9, 0xe9, 0x6b, 0x90, 0xba, 0x0e, 0xc0, 0xe8, 0xd2, 0x0d, 0xdd, 0xe1, 0x04, 0xe6,
	0x68, 0xcb, 0xa1, 0xa1, 0x3b, 0x23, 0x20, 0x67, 0x23, 0x81, 0x9c, 0x8b, 0x04, 0x32, 0xdc, 0x14,
	0xc8, 0xf9, 0xd9, 0x41, 0x2e, 0x84, 0x80, 0x7c, 0x0f, 0x36, 0x43, 0x41, 0x15, 0x38, 0xbf, 0x09,
	0xc5, 0x79, 0x5f, 0xeb, 0xbc, 0xc5, 0xf9, 0x9f, 0xc4, 0xf9, 0x31, 0x64, 0x06, 0xc8, 0xb2, 0xc9,
	0x0e, 0x32, 0x74, 0xd8, 0x46, 0xd8, 0x0e, 0x3e, 0x63, 0xb2, 0xba, 0xab, 0x97, 0xd6, 0x80, 0x71,
	0x7f, 0xea, 0x58, 0x43, 0xce, 0x79, 0x96, 0x36, 0x90, 0x33, 0x29, 0x98, 0x07, 0xb9, 0x48, 0x79,
	0x00, 0x91, 0xf2, 0x20, 0x7f, 0x53, 0x79, 0x50, 0x98, 0x3d, 0x0f, 0xe6, 0xaf, 0x9b, 0x07, 0xfb,
	0x5a, 0x47, 0xe4, 0xc1, 0xf7, 0x09, 0x58, 0x1f, 0xaf, 0x3a, 0xc0, 0xc6, 0x99, 0x6e, 0xf5, 0xfe,
	0x9b, 0xb9, 0x20, 0xc0, 0x52, 0xb5, 0x0e, 0x4d, 0x04, 0x17, 0x2c, 0x72, 0x3a, 0x04, 0x61, 0x48,
	0xff, 0x15, 0x18, 0xbc, 0xf8, 0x65, 0x42, 0xe2, 0xb7, 0x03, 0xf7, 0x27, 0x46, 0x46, 0xc4, 0xf0,
	0xc7, 0x24, 0xac, 0x0a, 0x25, 0xbb, 0x60, 0xba, 0x75, 0xf9, 0x16, 0xdc, 0x02, 0x1f, 0x42, 0x0a,
	0x5b, 0x4d, 0x64, 0xd1, 0x10, 0x2f, 0x5c, 0x71, 0x13, 0xbf, 0x0c, 0x0f, 0x6a, 0xf2, 0x31, 0x51,
	0xd4, 0x99, 0x90, 0x64, 0xa5, 0x8f, 0xb8, 0x36, 0x36, 0xed, 0x62, 0xb2, 0x92, 0xa8, 0xe6, 0xe8,
	0xc9, 0xc1, 0x9b, 0x9f, 0x62, 0xd3, 0x96, 0xee, 0x40, 0xc6, 0xc4, 0x16, 0xdd, 0x52, 0x8a, 0x39,
	0x91, 0xbc, 0x1e, 0x36, 0x49, 0x85, 0xe4, 0xc6, 0x49, 0x5f, 0x9a, 0xf6, 0xe5, 0x78, 0x0b, 0xa3,
	0xb5, 0x89, 0x5f, 0x18, 0xee, 0x4e, 0xb9, 0x09, 0x16, 0x87, 0x25, 0xaf, 0xe7, 0x84, 0x19, 0x2b,
	0x7a, 0xe7, 0x53, 0x96, 0x4a, 0xc4, 0xf1, 0xf3, 0xe0, 0x8a, 0x1d, 0x57, 0x94, 0xa3, 0xa2, 0xff,
	0x79, 0x3d, 0xfc, 0xd8, 0x0a, 0xd4, 0x6d, 0x08, 0xd6, 0xed, 0x1b, 0x39, 0x63, 0xa6, 0x97, 0xc7,
	0x0a, 0x94, 0xc7, 0xc3, 0x22, 0x78, 0xfa, 0x75, 0x3c, 0x4f, 0x04, 0xfd, 0xb7, 0x3c, 0xcd, 0xce,
	0xd3, 0x1e, 0xfc, 0xdf, 0xa7, 0xf6, 0xd9, 0x65, 0x74, 0x2d, 0x7b, 0x9d, 0x07, 0x62, 0x06, 0x1f,
	0x83, 0xb9, 0x28, 0x0c, 0x42, 0x18, 0x83, 0x57, 0x2a, 0x66, 0x3e, 0x50, 0x31, 0x83, 0x04, 0x16,
	0x66, 0x23, 0x70, 0xfe, 0x5a, 0x04, 0xfa, 0xab, 0xd2, 0x37, 0x09, 0x28, 0x8d, 0x91, 0xb8, 0x25,
	0xe9, 0x16, 0x50, 0xe8, 0x43, 0x25, 0x31, 0x01, 0x95, 0x64, 0x10, 0x95, 0xd0, 0xe0, 0xa7, 0xc2,
	0x83, 0x7f, 0xa5, 0x18, 0xa5, 0xa7, 0x14, 0xa3, 0xcc, 0x6c, 0x31, 0xcb, 0xfa, 0x63, 0xb6, 0xb5,
	0x0d, 0x5b, 0xe1, 0x61, 0x10, 0xd1, 0xfa, 0x79, 0x0e, 0x24, 0x57, 0x56, 0x47, 0xda, 0xe0, 0x44,
	0xd5, 0x3a, 0xc8, 0xb9, 0x0d, 0x51, 0x7a, 0x0c, 0x69, 0x93, 0x2e, 0x86, 0xdf, 0x2f, 0xd6, 0xc6,
	0x1e, 0x16, 0x6c, 0xbd, 0xdc, 0x04, 0x1f, 0x20, 0xad, 0x40, 0x8a, 0x7a, 0x88, 0x86, 0xb0, 0x50,
	0x67, 0x2f, 0x23, 0xde, 0x4e, 0xcd, 0xe6, 0xed, 0x74, 0x48, 0x86, 0xbc, 0xe3, 0xe1, 0xef, 0x39,
	0x54, 0xf8, 0xfb, 0xeb, 0x84, 0xf7, 0xdb, 0x65, 0x5f, 0xeb, 0x18, 0xf8, 0x45, 0x17, 0x35, 0x5b,
	0xe8, 0x5f, 0xe1, 0xf6, 0x2a, 0x2c, 0xaa, 0xde, 0x96, 0xc8, 0x9c, 0x3c, 0x00, 0xc1, 0x66, 0x2f,
	0x40, 0xa9, 0x49, 0x01, 0xfa, 0x9b, 0xee, 0x66, 0xbe, 0xbb, 0xf5, 0x48, 0x04, 0xdc, 0x38, 0xed,
	0xfd, 0x91, 0x81, 0xc4, 0x91, 0xdd, 0x92, 0xbe, 0x84, 0xa5, 0x91, 0xcf, 0x73, 0x9b, 0xb2, 0xff,
	0x63, 0xa4, 0x3c, 0xe6, 0xcb, 0x4b, 0xe9, 0xdd, 0xa9, 0x12, 0x77, 0x26, 0xc9, 0x82, 0xd5, 0x90,
	0x0f, 0x33, 0x3b, 0x21, 0x46, 0x82, 0xc2, 0x92, 0x12, 0x51, 0x38, 0x65, 0x4e, 0x72, 0x24, 0x45,
	0x9a, 0x73, 0x5f, 0xeb, 0x44, 0x9b, 0xd3, 0x57, 0x17, 0xa4, 0xaf, 0xa0, 0x34, 0xe1, 0x97, 0xca,
	0x7b, 0x51, 0xcc, 0x71, 0x71, 0xe9, 0xd1, 0x35, 0xc4, 0x62, 0x7e, 0x1d, 0x96, 0xc7, 0xdd, 0xb2,
	0xb7, 0x43, 0x6c, 0x5d, 0x51, 0x95, 0x76, 0xa3, 0xa8, 0x26, 0x4d, 0x45, 0x7c, 0x3b, 0x7d, 0x2a,
	0xe2, 0xd8, 0xdd, 0x28, 0x2a, 0x31, 0x55, 0x1f, 0xee, 0x84, 0x55, 0xda, 0xea, 0x54, 0x43, 0xae,
	0x3f, 0x1f, 0x46, 0x55, 0x8a, 0x69, 0xbf, 0x80, 0xc5, 0x60, 0xc9, 0xa8, 0x8c, 0x37, 0xe2, 0x29,
	0x4a, 0xd5, 0x69, 0x8a, 0x11, 0x3e, 0x47, 0x4f, 0xc8, 0x10, 0x3e, 0x47, 0x84, 0x61, 0x7c, 0x86,
	0x66, 0xfc, 0x93, 0xe3, 0x57, 0x17, 0xe5, 0xf8, 0xeb, 0x8b, 0x72, 0xfc, 0xcd, 0x45, 0x39, 0xfe,
	0xdd, 0x65, 0x39, 0xf6, 0xfa, 0xb2, 0x1c, 0xfb, 0xe5, 0xb2, 0x1c, 0xfb, 0xfc, 0x83, 0x96, 0xee,
	0xb4, 0xfb, 0x0d, 0x72, 0x96, 0x2a, 0x4d, 0xd5, 0x51, 0xb5, 0xb6, 0xaa, 0x1b, 0x5d, 0xb5, 0xa1,
	0xe8, 0x0d, 0xed, 0x01, 0xfb, 0x9f, 0x22, 0xf0, 0xaf, 0xc5, 0xd0, 0x44, 0x76, 0x23, 0x4d, 0xbf,
	0x9c, 0x3c, 0xfa, 0x33, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x92, 0x95, 0xc7, 0xd7, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ProxyClientState(ctx context.Context, in *MsgProxyClientState, opts ...grpc.CallOption) (*MsgProxyClientStateResponse, error)
	ProxyConnectionOpenTry(ctx context.Context, in *MsgProxyConnectionOpenTry, opts ...grpc.CallOption) (*MsgProxyConnectionOpenTryResponse, error)
	ProxyConnectionOpenAck(ctx context.Context, in *MsgProxyConnectionOpenAck, opts ...grpc.CallOption) (*MsgProxyConnectionOpenAckResponse, error)
	ProxyConnectionOpenConfirm(ctx context.Context, in *MsgProxyConnectionOpenConfirm, opts ...grpc.CallOption) (*MsgProxyConnectionOpenConfirmResponse, error)
	ProxyChannelOpenTry(ctx context.Context, in *MsgProxyChannelOpenTry, opts ...grpc.CallOption) (*MsgProxyChannelOpenTryResponse, error)
	ProxyChannelOpenAck(ctx context.Context, in *MsgProxyChannelOpenAck, opts ...grpc.CallOption) (*MsgProxyChannelOpenAckResponse, error)
	ProxyChannelOpenConfirm(ctx context.Context, in *MsgProxyChannelOpenConfirm, opts ...grpc.CallOption) (*MsgProxyChannelOpenConfirmResponse, error)
	ProxyRecvPacket(ctx context.Context, in *MsgProxyRecvPacket, opts ...grpc.CallOption) (*MsgProxyRecvPacketResponse, error)
	ProxyAcknowledgePacket(ctx context.Context, in *MsgProxyAcknowledgePacket, opts ...grpc.CallOption) (*MsgProxyAcknowledgePacketResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ProxyClientState(ctx context.Context, in *MsgProxyClientState, opts ...grpc.CallOption) (*MsgProxyClientStateResponse, error) {
	out := new(MsgProxyClientStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.proxy.v1.Msg/ProxyClientState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProxyConnectionOpenTry(ctx context.Context, in *MsgProxyConnectionOpenTry, opts ...grpc.CallOption) (*MsgProxyConnectionOpenTryResponse, error) {
	out := new(MsgProxyConnectionOpenTryResponse)
	err := c.cc.Invoke(ctx, "/ibc.proxy.v1.Msg/ProxyConnectionOpenTry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProxyConnectionOpenAck(ctx context.Context, in *MsgProxyConnectionOpenAck, opts ...grpc.CallOption) (*MsgProxyConnectionOpenAckResponse, error) {
	out := new(MsgProxyConnectionOpenAckResponse)
	err := c.cc.Invoke(ctx, "/ibc.proxy.v1.Msg/ProxyConnectionOpenAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProxyConnectionOpenConfirm(ctx context.Context, in *MsgProxyConnectionOpenConfirm, opts ...grpc.CallOption) (*MsgProxyConnectionOpenConfirmResponse, error) {
	out := new(MsgProxyConnectionOpenConfirmResponse)
	err := c.cc.Invoke(ctx, "/ibc.proxy.v1.Msg/ProxyConnectionOpenConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProxyChannelOpenTry(ctx context.Context, in *MsgProxyChannelOpenTry, opts ...grpc.CallOption) (*MsgProxyChannelOpenTryResponse, error) {
	out := new(MsgProxyChannelOpenTryResponse)
	err := c.cc.Invoke(ctx, "/ibc.proxy.v1.Msg/ProxyChannelOpenTry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProxyChannelOpenAck(ctx context.Context, in *MsgProxyChannelOpenAck, opts ...grpc.CallOption) (*MsgProxyChannelOpenAckResponse, error) {
	out := new(MsgProxyChannelOpenAckResponse)
	err := c.cc.Invoke(ctx, "/ibc.proxy.v1.Msg/ProxyChannelOpenAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProxyChannelOpenConfirm(ctx context.Context, in *MsgProxyChannelOpenConfirm, opts ...grpc.CallOption) (*MsgProxyChannelOpenConfirmResponse, error) {
	out := new(MsgProxyChannelOpenConfirmResponse)
	err := c.cc.Invoke(ctx, "/ibc.proxy.v1.Msg/ProxyChannelOpenConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProxyRecvPacket(ctx context.Context, in *MsgProxyRecvPacket, opts ...grpc.CallOption) (*MsgProxyRecvPacketResponse, error) {
	out := new(MsgProxyRecvPacketResponse)
	err := c.cc.Invoke(ctx, "/ibc.proxy.v1.Msg/ProxyRecvPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProxyAcknowledgePacket(ctx context.Context, in *MsgProxyAcknowledgePacket, opts ...grpc.CallOption) (*MsgProxyAcknowledgePacketResponse, error) {
	out := new(MsgProxyAcknowledgePacketResponse)
	err := c.cc.Invoke(ctx, "/ibc.proxy.v1.Msg/ProxyAcknowledgePacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ProxyClientState(context.Context, *MsgProxyClientState) (*MsgProxyClientStateResponse, error)
	ProxyConnectionOpenTry(context.Context, *MsgProxyConnectionOpenTry) (*MsgProxyConnectionOpenTryResponse, error)
	ProxyConnectionOpenAck(context.Context, *MsgProxyConnectionOpenAck) (*MsgProxyConnectionOpenAckResponse, error)
	ProxyConnectionOpenConfirm(context.Context, *MsgProxyConnectionOpenConfirm) (*MsgProxyConnectionOpenConfirmResponse, error)
	ProxyChannelOpenTry(context.Context, *MsgProxyChannelOpenTry) (*MsgProxyChannelOpenTryResponse, error)
	ProxyChannelOpenAck(context.Context, *MsgProxyChannelOpenAck) (*MsgProxyChannelOpenAckResponse, error)
	ProxyChannelOpenConfirm(context.Context, *MsgProxyChannelOpenConfirm) (*MsgProxyChannelOpenConfirmResponse, error)
	ProxyRecvPacket(context.Context, *MsgProxyRecvPacket) (*MsgProxyRecvPacketResponse, error)
	ProxyAcknowledgePacket(context.Context, *MsgProxyAcknowledgePacket) (*MsgProxyAcknowledgePacketResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ProxyClientState(ctx context.Context, req *MsgProxyClientState) (*MsgProxyClientStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyClientState not implemented")
}
func (*UnimplementedMsgServer) ProxyConnectionOpenTry(ctx context.Context, req *MsgProxyConnectionOpenTry) (*MsgProxyConnectionOpenTryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyConnectionOpenTry not implemented")
}
func (*UnimplementedMsgServer) ProxyConnectionOpenAck(ctx context.Context, req *MsgProxyConnectionOpenAck) (*MsgProxyConnectionOpenAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyConnectionOpenAck not implemented")
}
func (*UnimplementedMsgServer) ProxyConnectionOpenConfirm(ctx context.Context, req *MsgProxyConnectionOpenConfirm) (*MsgProxyConnectionOpenConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyConnectionOpenConfirm not implemented")
}
func (*UnimplementedMsgServer) ProxyChannelOpenTry(ctx context.Context, req *MsgProxyChannelOpenTry) (*MsgProxyChannelOpenTryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyChannelOpenTry not implemented")
}
func (*UnimplementedMsgServer) ProxyChannelOpenAck(ctx context.Context, req *MsgProxyChannelOpenAck) (*MsgProxyChannelOpenAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyChannelOpenAck not implemented")
}
func (*UnimplementedMsgServer) ProxyChannelOpenConfirm(ctx context.Context, req *MsgProxyChannelOpenConfirm) (*MsgProxyChannelOpenConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyChannelOpenConfirm not implemented")
}
func (*UnimplementedMsgServer) ProxyRecvPacket(ctx context.Context, req *MsgProxyRecvPacket) (*MsgProxyRecvPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyRecvPacket not implemented")
}
func (*UnimplementedMsgServer) ProxyAcknowledgePacket(ctx context.Context, req *MsgProxyAcknowledgePacket) (*MsgProxyAcknowledgePacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyAcknowledgePacket not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ProxyClientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProxyClientState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProxyClientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.proxy.v1.Msg/ProxyClientState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProxyClientState(ctx, req.(*MsgProxyClientState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProxyConnectionOpenTry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProxyConnectionOpenTry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProxyConnectionOpenTry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.proxy.v1.Msg/ProxyConnectionOpenTry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProxyConnectionOpenTry(ctx, req.(*MsgProxyConnectionOpenTry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProxyConnectionOpenAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProxyConnectionOpenAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProxyConnectionOpenAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.proxy.v1.Msg/ProxyConnectionOpenAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProxyConnectionOpenAck(ctx, req.(*MsgProxyConnectionOpenAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProxyConnectionOpenConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProxyConnectionOpenConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProxyConnectionOpenConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.proxy.v1.Msg/ProxyConnectionOpenConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProxyConnectionOpenConfirm(ctx, req.(*MsgProxyConnectionOpenConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProxyChannelOpenTry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProxyChannelOpenTry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProxyChannelOpenTry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.proxy.v1.Msg/ProxyChannelOpenTry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProxyChannelOpenTry(ctx, req.(*MsgProxyChannelOpenTry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProxyChannelOpenAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProxyChannelOpenAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProxyChannelOpenAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.proxy.v1.Msg/ProxyChannelOpenAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProxyChannelOpenAck(ctx, req.(*MsgProxyChannelOpenAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProxyChannelOpenConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProxyChannelOpenConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProxyChannelOpenConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.proxy.v1.Msg/ProxyChannelOpenConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProxyChannelOpenConfirm(ctx, req.(*MsgProxyChannelOpenConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProxyRecvPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProxyRecvPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProxyRecvPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.proxy.v1.Msg/ProxyRecvPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProxyRecvPacket(ctx, req.(*MsgProxyRecvPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProxyAcknowledgePacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProxyAcknowledgePacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProxyAcknowledgePacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.proxy.v1.Msg/ProxyAcknowledgePacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProxyAcknowledgePacket(ctx, req.(*MsgProxyAcknowledgePacket))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.proxy.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyClientState",
			Handler:    _Msg_ProxyClientState_Handler,
		},
		{
			MethodName: "ProxyConnectionOpenTry",
			Handler:    _Msg_ProxyConnectionOpenTry_Handler,
		},
		{
			MethodName: "ProxyConnectionOpenAck",
			Handler:    _Msg_ProxyConnectionOpenAck_Handler,
		},
		{
			MethodName: "ProxyConnectionOpenConfirm",
			Handler:    _Msg_ProxyConnectionOpenConfirm_Handler,
		},
		{
			MethodName: "ProxyChannelOpenTry",
			Handler:    _Msg_ProxyChannelOpenTry_Handler,
		},
		{
			MethodName: "ProxyChannelOpenAck",
			Handler:    _Msg_ProxyChannelOpenAck_Handler,
		},
		{
			MethodName: "ProxyChannelOpenConfirm",
			Handler:    _Msg_ProxyChannelOpenConfirm_Handler,
		},
		{
			MethodName: "ProxyRecvPacket",
			Handler:    _Msg_ProxyRecvPacket_Handler,
		},
		{
			MethodName: "ProxyAcknowledgePacket",
			Handler:    _Msg_ProxyAcknowledgePacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/modules/proxy/tx.proto",
}

func (m *MsgProxyClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.ConsensusHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ProofConsensus) > 0 {
		i -= len(m.ProofConsensus)
		copy(dAtA[i:], m.ProofConsensus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofConsensus)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProofClient) > 0 {
		i -= len(m.ProofClient)
		copy(dAtA[i:], m.ProofClient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofClient)))
		i--
		dAtA[i] = 0x32
	}
	if m.ConsensusState != nil {
		{
			size, err := m.ConsensusState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CounterpartyClientId) > 0 {
		i -= len(m.CounterpartyClientId)
		copy(dAtA[i:], m.CounterpartyClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CounterpartyClientId)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.UpstreamPrefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.UpstreamClientId) > 0 {
		i -= len(m.UpstreamClientId)
		copy(dAtA[i:], m.UpstreamClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpstreamClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProxyClientStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyClientStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyClientStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProxyConnectionOpenTry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyConnectionOpenTry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyConnectionOpenTry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x62
	}
	{
		size, err := m.ConsensusHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.ProofConsensus) > 0 {
		i -= len(m.ProofConsensus)
		copy(dAtA[i:], m.ProofConsensus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofConsensus)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ProofClient) > 0 {
		i -= len(m.ProofClient)
		copy(dAtA[i:], m.ProofClient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofClient)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ProofInit) > 0 {
		i -= len(m.ProofInit)
		copy(dAtA[i:], m.ProofInit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofInit)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ConsensusState != nil {
		{
			size, err := m.ConsensusState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Connection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.UpstreamPrefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.UpstreamClientId) > 0 {
		i -= len(m.UpstreamClientId)
		copy(dAtA[i:], m.UpstreamClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpstreamClientId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProxyConnectionOpenTryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyConnectionOpenTryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyConnectionOpenTryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProxyConnectionOpenAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyConnectionOpenAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyConnectionOpenAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size, err := m.ConsensusHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.ProofConsensus) > 0 {
		i -= len(m.ProofConsensus)
		copy(dAtA[i:], m.ProofConsensus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofConsensus)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ProofClient) > 0 {
		i -= len(m.ProofClient)
		copy(dAtA[i:], m.ProofClient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofClient)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ProofTry) > 0 {
		i -= len(m.ProofTry)
		copy(dAtA[i:], m.ProofTry)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofTry)))
		i--
		dAtA[i] = 0x42
	}
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ConsensusState != nil {
		{
			size, err := m.ConsensusState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Connection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.UpstreamPrefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.UpstreamClientId) > 0 {
		i -= len(m.UpstreamClientId)
		copy(dAtA[i:], m.UpstreamClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpstreamClientId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProxyConnectionOpenAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyConnectionOpenAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyConnectionOpenAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProxyConnectionOpenConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyConnectionOpenConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyConnectionOpenConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.ProofAck) > 0 {
		i -= len(m.ProofAck)
		copy(dAtA[i:], m.ProofAck)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofAck)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Connection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.UpstreamPrefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.UpstreamClientId) > 0 {
		i -= len(m.UpstreamClientId)
		copy(dAtA[i:], m.UpstreamClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpstreamClientId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProxyConnectionOpenConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyConnectionOpenConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyConnectionOpenConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProxyChannelOpenTry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyChannelOpenTry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyChannelOpenTry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x62
	}
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.ProofInit) > 0 {
		i -= len(m.ProofInit)
		copy(dAtA[i:], m.ProofInit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofInit)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DownstreamVersion) > 0 {
		i -= len(m.DownstreamVersion)
		copy(dAtA[i:], m.DownstreamVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DownstreamVersion)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DownstreamPortId) > 0 {
		i -= len(m.DownstreamPortId)
		copy(dAtA[i:], m.DownstreamPortId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DownstreamPortId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConnectionHops) > 0 {
		for iNdEx := len(m.ConnectionHops) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConnectionHops[iNdEx])
			copy(dAtA[i:], m.ConnectionHops[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionHops[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Order != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.UpstreamPrefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.UpstreamClientId) > 0 {
		i -= len(m.UpstreamClientId)
		copy(dAtA[i:], m.UpstreamClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpstreamClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProxyChannelOpenTryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyChannelOpenTryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyChannelOpenTryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProxyChannelOpenAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyChannelOpenAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyChannelOpenAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if len(m.ProofTry) > 0 {
		i -= len(m.ProofTry)
		copy(dAtA[i:], m.ProofTry)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofTry)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DownstreamVersion) > 0 {
		i -= len(m.DownstreamVersion)
		copy(dAtA[i:], m.DownstreamVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DownstreamVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DownstreamChannelId) > 0 {
		i -= len(m.DownstreamChannelId)
		copy(dAtA[i:], m.DownstreamChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DownstreamChannelId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DownstreamPortId) > 0 {
		i -= len(m.DownstreamPortId)
		copy(dAtA[i:], m.DownstreamPortId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DownstreamPortId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConnectionHops) > 0 {
		for iNdEx := len(m.ConnectionHops) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConnectionHops[iNdEx])
			copy(dAtA[i:], m.ConnectionHops[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionHops[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Order != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.UpstreamPrefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.UpstreamClientId) > 0 {
		i -= len(m.UpstreamClientId)
		copy(dAtA[i:], m.UpstreamClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpstreamClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProxyChannelOpenAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyChannelOpenAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyChannelOpenAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProxyChannelOpenConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyChannelOpenConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyChannelOpenConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.ProofAck) > 0 {
		i -= len(m.ProofAck)
		copy(dAtA[i:], m.ProofAck)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofAck)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DownstreamChannelId) > 0 {
		i -= len(m.DownstreamChannelId)
		copy(dAtA[i:], m.DownstreamChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DownstreamChannelId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.UpstreamPrefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.UpstreamClientId) > 0 {
		i -= len(m.UpstreamClientId)
		copy(dAtA[i:], m.UpstreamClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpstreamClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProxyChannelOpenConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyChannelOpenConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyChannelOpenConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProxyRecvPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyRecvPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyRecvPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Packet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.UpstreamPrefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.UpstreamClientId) > 0 {
		i -= len(m.UpstreamClientId)
		copy(dAtA[i:], m.UpstreamClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpstreamClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProxyRecvPacketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyRecvPacketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyRecvPacketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProxyAcknowledgePacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyAcknowledgePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyAcknowledgePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Acknowledgement) > 0 {
		i -= len(m.Acknowledgement)
		copy(dAtA[i:], m.Acknowledgement)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Acknowledgement)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Packet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.UpstreamPrefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.UpstreamClientId) > 0 {
		i -= len(m.UpstreamClientId)
		copy(dAtA[i:], m.UpstreamClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpstreamClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProxyAcknowledgePacketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProxyAcknowledgePacketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProxyAcknowledgePacketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgProxyClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpstreamClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.UpstreamPrefix.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.CounterpartyClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ConsensusState != nil {
		l = m.ConsensusState.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofClient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofConsensus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ConsensusHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProxyClientStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProxyConnectionOpenTry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UpstreamClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.UpstreamPrefix.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Connection.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ConsensusState != nil {
		l = m.ConsensusState.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofInit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofClient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofConsensus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ConsensusHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProxyConnectionOpenTryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProxyConnectionOpenAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UpstreamClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.UpstreamPrefix.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Connection.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ConsensusState != nil {
		l = m.ConsensusState.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofTry)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofClient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofConsensus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ConsensusHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProxyConnectionOpenAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProxyConnectionOpenConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UpstreamClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.UpstreamPrefix.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Connection.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ProofAck)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProxyConnectionOpenConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProxyChannelOpenTry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpstreamClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.UpstreamPrefix.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Order != 0 {
		n += 1 + sovTx(uint64(m.Order))
	}
	if len(m.ConnectionHops) > 0 {
		for _, s := range m.ConnectionHops {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DownstreamPortId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DownstreamVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofInit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProxyChannelOpenTryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProxyChannelOpenAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpstreamClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.UpstreamPrefix.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Order != 0 {
		n += 1 + sovTx(uint64(m.Order))
	}
	if len(m.ConnectionHops) > 0 {
		for _, s := range m.ConnectionHops {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DownstreamPortId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DownstreamChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DownstreamVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofTry)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProxyChannelOpenAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProxyChannelOpenConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpstreamClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.UpstreamPrefix.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DownstreamChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofAck)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProxyChannelOpenConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProxyRecvPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpstreamClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.UpstreamPrefix.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Packet.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProxyRecvPacketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProxyAcknowledgePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpstreamClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.UpstreamPrefix.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Packet.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Acknowledgement)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProxyAcknowledgePacketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgProxyClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpstreamPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types1.Any{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusState == nil {
				m.ConsensusState = &types1.Any{}
			}
			if err := m.ConsensusState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofClient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofClient = append(m.ProofClient[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofClient == nil {
				m.ProofClient = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofConsensus", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofConsensus = append(m.ProofConsensus[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofConsensus == nil {
				m.ProofConsensus = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyClientStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyClientStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyClientStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyConnectionOpenTry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenTry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenTry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpstreamPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Connection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types1.Any{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusState == nil {
				m.ConsensusState = &types1.Any{}
			}
			if err := m.ConsensusState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofInit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofInit = append(m.ProofInit[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofInit == nil {
				m.ProofInit = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofClient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofClient = append(m.ProofClient[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofClient == nil {
				m.ProofClient = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofConsensus", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofConsensus = append(m.ProofConsensus[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofConsensus == nil {
				m.ProofConsensus = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyConnectionOpenTryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenTryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenTryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyConnectionOpenAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpstreamPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Connection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types1.Any{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusState == nil {
				m.ConsensusState = &types1.Any{}
			}
			if err := m.ConsensusState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &types3.Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofTry", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofTry = append(m.ProofTry[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofTry == nil {
				m.ProofTry = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofClient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofClient = append(m.ProofClient[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofClient == nil {
				m.ProofClient = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofConsensus", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofConsensus = append(m.ProofConsensus[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofConsensus == nil {
				m.ProofConsensus = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyConnectionOpenAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyConnectionOpenConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpstreamPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Connection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofAck", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofAck = append(m.ProofAck[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofAck == nil {
				m.ProofAck = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyConnectionOpenConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyConnectionOpenConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyChannelOpenTry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyChannelOpenTry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyChannelOpenTry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpstreamPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= types4.Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionHops", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionHops = append(m.ConnectionHops, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofInit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofInit = append(m.ProofInit[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofInit == nil {
				m.ProofInit = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyChannelOpenTryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyChannelOpenTryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyChannelOpenTryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyChannelOpenAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyChannelOpenAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyChannelOpenAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpstreamPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= types4.Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionHops", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionHops = append(m.ConnectionHops, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofTry", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofTry = append(m.ProofTry[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofTry == nil {
				m.ProofTry = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyChannelOpenAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyChannelOpenAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyChannelOpenAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyChannelOpenConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyChannelOpenConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyChannelOpenConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpstreamPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofAck", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofAck = append(m.ProofAck[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofAck == nil {
				m.ProofAck = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyChannelOpenConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyChannelOpenConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyChannelOpenConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyRecvPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyRecvPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyRecvPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpstreamPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Packet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyRecvPacketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyRecvPacketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyRecvPacketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyAcknowledgePacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyAcknowledgePacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyAcknowledgePacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpstreamPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Packet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledgement", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acknowledgement = append(m.Acknowledgement[:0], dAtA[iNdEx:postIndex]...)
			if m.Acknowledgement == nil {
				m.Acknowledgement = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProxyAcknowledgePacketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProxyAcknowledgePacketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProxyAcknowledgePacketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

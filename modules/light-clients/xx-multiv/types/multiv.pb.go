// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/multiv/v1/multiv.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/ibc-go/modules/core/02-client/types"
	_ "github.com/cosmos/ibc-go/modules/core/23-commitment/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClientState struct {
	UnderlyingClientState *types.Any `protobuf:"bytes,1,opt,name=underlying_client_state,json=underlyingClientState,proto3" json:"underlying_client_state,omitempty"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf389ffd2358a46, []int{0}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

type MultiProof struct {
	Proofs []*Proof `protobuf:"bytes,1,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (m *MultiProof) Reset()         { *m = MultiProof{} }
func (m *MultiProof) String() string { return proto.CompactTextString(m) }
func (*MultiProof) ProtoMessage()    {}
func (*MultiProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf389ffd2358a46, []int{1}
}
func (m *MultiProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiProof.Merge(m, src)
}
func (m *MultiProof) XXX_Size() int {
	return m.Size()
}
func (m *MultiProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiProof.DiscardUnknown(m)
}

var xxx_messageInfo_MultiProof proto.InternalMessageInfo

type BranchProof struct {
	ClientProof     []byte        `protobuf:"bytes,1,opt,name=client_proof,json=clientProof,proto3" json:"client_proof,omitempty"`
	ClientState     *types.Any    `protobuf:"bytes,2,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
	ConsensusProof  []byte        `protobuf:"bytes,3,opt,name=consensus_proof,json=consensusProof,proto3" json:"consensus_proof,omitempty"`
	ConsensusState  *types.Any    `protobuf:"bytes,4,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
	ProofHeight     types1.Height `protobuf:"bytes,5,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	ConsensusHeight types1.Height `protobuf:"bytes,6,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height"`
}

func (m *BranchProof) Reset()         { *m = BranchProof{} }
func (m *BranchProof) String() string { return proto.CompactTextString(m) }
func (*BranchProof) ProtoMessage()    {}
func (*BranchProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf389ffd2358a46, []int{2}
}
func (m *BranchProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BranchProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BranchProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BranchProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BranchProof.Merge(m, src)
}
func (m *BranchProof) XXX_Size() int {
	return m.Size()
}
func (m *BranchProof) XXX_DiscardUnknown() {
	xxx_messageInfo_BranchProof.DiscardUnknown(m)
}

var xxx_messageInfo_BranchProof proto.InternalMessageInfo

type Proof struct {
	// Types that are valid to be assigned to Proof:
	//	*Proof_Branch
	//	*Proof_LeafClient
	//	*Proof_LeafConsensus
	Proof isProof_Proof `protobuf_oneof:"proof"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf389ffd2358a46, []int{3}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

type isProof_Proof interface {
	isProof_Proof()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Proof_Branch struct {
	Branch *BranchProof `protobuf:"bytes,1,opt,name=branch,proto3,oneof" json:"branch,omitempty"`
}
type Proof_LeafClient struct {
	LeafClient *LeafClientProof `protobuf:"bytes,2,opt,name=leafClient,proto3,oneof" json:"leafClient,omitempty"`
}
type Proof_LeafConsensus struct {
	LeafConsensus *LeafConsensusProof `protobuf:"bytes,3,opt,name=leafConsensus,proto3,oneof" json:"leafConsensus,omitempty"`
}

func (*Proof_Branch) isProof_Proof()        {}
func (*Proof_LeafClient) isProof_Proof()    {}
func (*Proof_LeafConsensus) isProof_Proof() {}

func (m *Proof) GetProof() isProof_Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *Proof) GetBranch() *BranchProof {
	if x, ok := m.GetProof().(*Proof_Branch); ok {
		return x.Branch
	}
	return nil
}

func (m *Proof) GetLeafClient() *LeafClientProof {
	if x, ok := m.GetProof().(*Proof_LeafClient); ok {
		return x.LeafClient
	}
	return nil
}

func (m *Proof) GetLeafConsensus() *LeafConsensusProof {
	if x, ok := m.GetProof().(*Proof_LeafConsensus); ok {
		return x.LeafConsensus
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Proof) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Proof_Branch)(nil),
		(*Proof_LeafClient)(nil),
		(*Proof_LeafConsensus)(nil),
	}
}

type LeafClientProof struct {
	Proof       []byte        `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	ProofHeight types1.Height `protobuf:"bytes,2,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
}

func (m *LeafClientProof) Reset()         { *m = LeafClientProof{} }
func (m *LeafClientProof) String() string { return proto.CompactTextString(m) }
func (*LeafClientProof) ProtoMessage()    {}
func (*LeafClientProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf389ffd2358a46, []int{4}
}
func (m *LeafClientProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeafClientProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeafClientProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeafClientProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafClientProof.Merge(m, src)
}
func (m *LeafClientProof) XXX_Size() int {
	return m.Size()
}
func (m *LeafClientProof) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafClientProof.DiscardUnknown(m)
}

var xxx_messageInfo_LeafClientProof proto.InternalMessageInfo

type LeafConsensusProof struct {
	Proof           []byte        `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	ProofHeight     types1.Height `protobuf:"bytes,2,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height"`
	ConsensusHeight types1.Height `protobuf:"bytes,3,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height"`
}

func (m *LeafConsensusProof) Reset()         { *m = LeafConsensusProof{} }
func (m *LeafConsensusProof) String() string { return proto.CompactTextString(m) }
func (*LeafConsensusProof) ProtoMessage()    {}
func (*LeafConsensusProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf389ffd2358a46, []int{5}
}
func (m *LeafConsensusProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeafConsensusProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeafConsensusProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeafConsensusProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafConsensusProof.Merge(m, src)
}
func (m *LeafConsensusProof) XXX_Size() int {
	return m.Size()
}
func (m *LeafConsensusProof) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafConsensusProof.DiscardUnknown(m)
}

var xxx_messageInfo_LeafConsensusProof proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClientState)(nil), "ibc.lightclients.multiv.v1.ClientState")
	proto.RegisterType((*MultiProof)(nil), "ibc.lightclients.multiv.v1.MultiProof")
	proto.RegisterType((*BranchProof)(nil), "ibc.lightclients.multiv.v1.BranchProof")
	proto.RegisterType((*Proof)(nil), "ibc.lightclients.multiv.v1.Proof")
	proto.RegisterType((*LeafClientProof)(nil), "ibc.lightclients.multiv.v1.LeafClientProof")
	proto.RegisterType((*LeafConsensusProof)(nil), "ibc.lightclients.multiv.v1.LeafConsensusProof")
}

func init() {
	proto.RegisterFile("ibc/lightclients/multiv/v1/multiv.proto", fileDescriptor_fbf389ffd2358a46)
}

var fileDescriptor_fbf389ffd2358a46 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xbb, 0x8e, 0xd3, 0x40,
	0x14, 0xb5, 0xf3, 0x42, 0x1a, 0x07, 0x16, 0x59, 0x41, 0x84, 0x14, 0xce, 0x6e, 0x9a, 0xac, 0x84,
	0x32, 0xa3, 0x84, 0x02, 0x81, 0x44, 0xb1, 0xd9, 0x82, 0x48, 0x6c, 0x24, 0x64, 0x24, 0x0a, 0x9a,
	0x68, 0xec, 0x4c, 0x9c, 0x91, 0x6c, 0x4f, 0x64, 0x8f, 0xa3, 0xe4, 0x0f, 0x28, 0xf9, 0x04, 0xbe,
	0x85, 0x6a, 0xcb, 0x2d, 0xa9, 0x10, 0x4a, 0x2a, 0x7e, 0x81, 0x0a, 0x79, 0xee, 0xe4, 0xb1, 0x2c,
	0x04, 0x04, 0xda, 0x6e, 0x1e, 0xe7, 0x9c, 0x7b, 0xe6, 0x9e, 0x6b, 0xa3, 0x36, 0xf7, 0x7c, 0x12,
	0xf2, 0x60, 0x2a, 0xfd, 0x90, 0xb3, 0x58, 0xa6, 0x24, 0xca, 0x42, 0xc9, 0xe7, 0x64, 0xde, 0xd5,
	0x2b, 0x3c, 0x4b, 0x84, 0x14, 0x76, 0x83, 0x7b, 0x3e, 0xde, 0x07, 0x62, 0x7d, 0x3d, 0xef, 0x36,
	0x6a, 0x81, 0x08, 0x84, 0x82, 0x91, 0x7c, 0x05, 0x8c, 0xc6, 0xa3, 0x40, 0x88, 0x20, 0x64, 0x44,
	0xed, 0xbc, 0x6c, 0x42, 0x68, 0xbc, 0xd4, 0x57, 0xcd, 0xbc, 0xaa, 0x2f, 0x12, 0x46, 0x40, 0x2c,
	0xaf, 0x06, 0x2b, 0x0d, 0x68, 0xef, 0x00, 0x22, 0x8a, 0xb8, 0x8c, 0x36, 0xa0, 0xed, 0x0e, 0x80,
	0x2d, 0x8a, 0xac, 0x73, 0x45, 0x7c, 0x23, 0xa9, 0x64, 0xf6, 0x05, 0x7a, 0x98, 0xc5, 0x63, 0x96,
	0x84, 0x4b, 0x1e, 0x07, 0x23, 0x90, 0x1c, 0xa5, 0xf9, 0x55, 0xdd, 0x3c, 0x36, 0x4f, 0xad, 0x5e,
	0x0d, 0x83, 0x2b, 0xbc, 0x71, 0x85, 0xcf, 0xe2, 0xa5, 0xfb, 0x60, 0x47, 0xda, 0x53, 0x7b, 0x5e,
	0x7a, 0xff, 0xb1, 0x69, 0xb4, 0x86, 0x08, 0x0d, 0xf3, 0xa7, 0xbe, 0x4e, 0x84, 0x98, 0xd8, 0xcf,
	0x50, 0x65, 0x96, 0x2f, 0xd2, 0xba, 0x79, 0x5c, 0x3c, 0xb5, 0x7a, 0x27, 0xf8, 0xf7, 0x8d, 0xc1,
	0x8a, 0xe2, 0x6a, 0x82, 0x96, 0xfb, 0x56, 0x40, 0x56, 0x3f, 0xa1, 0xb1, 0x3f, 0x05, 0xc1, 0x13,
	0x54, 0xd5, 0x3e, 0x15, 0x4c, 0xf9, 0xac, 0xba, 0x16, 0x9c, 0x01, 0xe4, 0xe9, 0x16, 0x02, 0x4f,
	0x29, 0x1c, 0x78, 0x8a, 0x26, 0x42, 0x3b, 0xda, 0xe8, 0xc8, 0x17, 0x71, 0xca, 0xe2, 0x34, 0x4b,
	0xb5, 0x7c, 0x51, 0xc9, 0xdf, 0xdb, 0x1e, 0x43, 0x85, 0x17, 0xfb, 0x40, 0x28, 0x52, 0x3a, 0x50,
	0x64, 0x47, 0x87, 0x3a, 0xe7, 0xa8, 0xaa, 0xd4, 0x47, 0x53, 0x96, 0x37, 0xa2, 0x5e, 0x56, 0xdc,
	0x86, 0x6a, 0x4d, 0x9e, 0x22, 0xd6, 0xe1, 0xce, 0xbb, 0x78, 0xa0, 0x10, 0xfd, 0xd2, 0xe5, 0x97,
	0xa6, 0xe1, 0x5a, 0x8a, 0x05, 0x47, 0xf6, 0x2b, 0x74, 0x7f, 0xe7, 0x41, 0x0b, 0x55, 0xfe, 0x52,
	0x68, 0xe7, 0x1e, 0x8e, 0x75, 0xaf, 0xbf, 0x9b, 0xa8, 0x0c, 0x0f, 0x3c, 0x43, 0x15, 0x4f, 0x35,
	0x5d, 0xcf, 0x41, 0xfb, 0x50, 0x6c, 0x7b, 0xf1, 0x0c, 0x0c, 0x57, 0x13, 0xed, 0x21, 0x42, 0x21,
	0xa3, 0x13, 0x18, 0x10, 0x9d, 0xc1, 0xe3, 0x43, 0x32, 0x17, 0x5b, 0xf4, 0x46, 0x6a, 0x4f, 0xc0,
	0x7e, 0x8b, 0xee, 0xaa, 0xdd, 0xc6, 0xb8, 0x4a, 0xc6, 0xea, 0xe1, 0x3f, 0x2a, 0x5e, 0x4b, 0x6e,
	0x60, 0xb8, 0xd7, 0x65, 0xfa, 0x77, 0x50, 0x59, 0x75, 0xb5, 0x95, 0xa0, 0xa3, 0x9f, 0x1c, 0xd8,
	0x35, 0x7d, 0xa7, 0x87, 0x0c, 0x36, 0x37, 0xd2, 0x2b, 0xfc, 0x43, 0x7a, 0xba, 0xe1, 0x9f, 0x4c,
	0x64, 0xdf, 0x34, 0x79, 0x8b, 0x75, 0x7f, 0x39, 0x35, 0xc5, 0xff, 0x9a, 0x9a, 0x3e, 0xbd, 0x5c,
	0x39, 0xe6, 0xd5, 0xca, 0x31, 0xbf, 0xae, 0x1c, 0xf3, 0xc3, 0xda, 0x31, 0xae, 0xd6, 0x8e, 0xf1,
	0x79, 0xed, 0x18, 0xef, 0x5e, 0x06, 0x5c, 0x4e, 0x33, 0x0f, 0xfb, 0x22, 0x22, 0x63, 0x2a, 0xa9,
	0x3f, 0xa5, 0x3c, 0x0e, 0xa9, 0x47, 0xb8, 0xe7, 0x77, 0x66, 0x89, 0x58, 0x2c, 0x49, 0x24, 0xc6,
	0x59, 0xc8, 0x52, 0xf8, 0xa7, 0x76, 0x36, 0x3f, 0xd5, 0xc5, 0xa2, 0xa3, 0xff, 0xab, 0x72, 0x39,
	0x63, 0xa9, 0x57, 0x51, 0x9f, 0xd3, 0x93, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x03, 0x4a, 0x55,
	0xce, 0x7f, 0x05, 0x00, 0x00,
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnderlyingClientState != nil {
		{
			size, err := m.UnderlyingClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proofs) > 0 {
		for iNdEx := len(m.Proofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMultiv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BranchProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BranchProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BranchProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ConsensusHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultiv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultiv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ConsensusState != nil {
		{
			size, err := m.ConsensusState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConsensusProof) > 0 {
		i -= len(m.ConsensusProof)
		copy(dAtA[i:], m.ConsensusProof)
		i = encodeVarintMultiv(dAtA, i, uint64(len(m.ConsensusProof)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientProof) > 0 {
		i -= len(m.ClientProof)
		copy(dAtA[i:], m.ClientProof)
		i = encodeVarintMultiv(dAtA, i, uint64(len(m.ClientProof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size := m.Proof.Size()
			i -= size
			if _, err := m.Proof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Proof_Branch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof_Branch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Branch != nil {
		{
			size, err := m.Branch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Proof_LeafClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof_LeafClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeafClient != nil {
		{
			size, err := m.LeafClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Proof_LeafConsensus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof_LeafConsensus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeafConsensus != nil {
		{
			size, err := m.LeafConsensus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *LeafClientProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeafClientProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeafClientProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultiv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintMultiv(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeafConsensusProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeafConsensusProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeafConsensusProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ConsensusHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultiv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ProofHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultiv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintMultiv(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMultiv(dAtA []byte, offset int, v uint64) int {
	offset -= sovMultiv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnderlyingClientState != nil {
		l = m.UnderlyingClientState.Size()
		n += 1 + l + sovMultiv(uint64(l))
	}
	return n
}

func (m *MultiProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proofs) > 0 {
		for _, e := range m.Proofs {
			l = e.Size()
			n += 1 + l + sovMultiv(uint64(l))
		}
	}
	return n
}

func (m *BranchProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientProof)
	if l > 0 {
		n += 1 + l + sovMultiv(uint64(l))
	}
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovMultiv(uint64(l))
	}
	l = len(m.ConsensusProof)
	if l > 0 {
		n += 1 + l + sovMultiv(uint64(l))
	}
	if m.ConsensusState != nil {
		l = m.ConsensusState.Size()
		n += 1 + l + sovMultiv(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovMultiv(uint64(l))
	l = m.ConsensusHeight.Size()
	n += 1 + l + sovMultiv(uint64(l))
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proof != nil {
		n += m.Proof.Size()
	}
	return n
}

func (m *Proof_Branch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Branch != nil {
		l = m.Branch.Size()
		n += 1 + l + sovMultiv(uint64(l))
	}
	return n
}
func (m *Proof_LeafClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeafClient != nil {
		l = m.LeafClient.Size()
		n += 1 + l + sovMultiv(uint64(l))
	}
	return n
}
func (m *Proof_LeafConsensus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeafConsensus != nil {
		l = m.LeafConsensus.Size()
		n += 1 + l + sovMultiv(uint64(l))
	}
	return n
}
func (m *LeafClientProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovMultiv(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovMultiv(uint64(l))
	return n
}

func (m *LeafConsensusProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovMultiv(uint64(l))
	}
	l = m.ProofHeight.Size()
	n += 1 + l + sovMultiv(uint64(l))
	l = m.ConsensusHeight.Size()
	n += 1 + l + sovMultiv(uint64(l))
	return n
}

func sovMultiv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMultiv(x uint64) (n int) {
	return sovMultiv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderlyingClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnderlyingClientState == nil {
				m.UnderlyingClientState = &types.Any{}
			}
			if err := m.UnderlyingClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofs = append(m.Proofs, &Proof{})
			if err := m.Proofs[len(m.Proofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BranchProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BranchProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BranchProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientProof = append(m.ClientProof[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientProof == nil {
				m.ClientProof = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types.Any{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusProof = append(m.ConsensusProof[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsensusProof == nil {
				m.ConsensusProof = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusState == nil {
				m.ConsensusState = &types.Any{}
			}
			if err := m.ConsensusState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BranchProof{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Proof = &Proof_Branch{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LeafClientProof{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Proof = &Proof_LeafClient{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafConsensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LeafConsensusProof{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Proof = &Proof_LeafConsensus{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeafClientProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeafClientProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeafClientProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeafConsensusProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeafConsensusProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeafConsensusProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMultiv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMultiv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultiv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMultiv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMultiv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMultiv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMultiv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMultiv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMultiv = fmt.Errorf("proto: unexpected end of group")
)
